Roadmap Maestro del Frontend de LifeBit (v2.0 - Consolidado)
Nuestra Estrella Polar: "Construir la plataforma SaaS más intuitiva, potente y adictiva para la gestión de condominios, transformando tareas complejas en experiencias simples y gratificantes."
Documento Fundacional: Este roadmap se rige por nuestro Manifiesto de Diseño y Experiencia de LifeBit, que prioriza el modo oscuro, la psicología del comportamiento, el benchmarking de aplicaciones de clase mundial y la internacionalización (i18n).
Leyenda de Tareas:
[CORE]: Tarea de Arquitectura o Fundación.
[UI/UX]: Tarea centrada en la Interfaz o Experiencia de Usuario.
[LÓGICA]: Tarea centrada en la gestión de estado y comunicación con la API.
[PÁGINA]: Creación de una vista principal.
[COMPONENTE]: Creación de un bloque de UI reutilizable.

Leyenda de Estado:
[x]: Tarea Completada
[~]: Tarea en Progreso o Parcialmente Completada
[ ]: Tarea Pendiente

Epopeya F0: La Plataforma de Lanzamiento (Fundación y Arquitectura)
Objetivo: Forjar el esqueleto de nuestra aplicación. La base invisible pero indestructible sobre la que construiremos todo lo demás.
[x] F0-01 [CORE]: Definir el Manifiesto de Diseño y Experiencia de LifeBit.
[~] Paleta de colores (Modo Oscuro y Claro).
[x] Escala tipográfica y de espaciado.
[~] Set de iconografía y tono de voz.
[ ] F0-02 [CORE]: Configurar la librería de internacionalización (i18next) para soporte es/en.
[x] F0-03 [LÓGICA]: Crear el apiService definitivo con axios, incluyendo withCredentials: true y el interceptor de accessToken.
[~] F0-04 [UI/UX]: Construir el LayoutPrincipal adaptable (Header/Sidebar) que cambia según el rol del usuario (dueño, admin, residente).
[x] F0-05 [UI/UX]: Refactorizar y perfeccionar el componente ThemeToggle para el cambio de tema.
[x] F0-06 [CORE]: Configurar el App.jsx con el BrowserRouter y la estructura de rutas principal.

Epopeya F1: La Puerta de Entrada (Autenticación y Vistas Públicas)
Objetivo: Crear un flujo de acceso y onboarding impecable, seguro y persistente para todos los roles.
[x] F1-01 [LÓGICA]: Construir el authStore de Zustand con toda la lógica de estado (login, logout, refreshToken, getProfile).
[x] F1-02 [COMPONENTE]: Construir el SessionVerifier para restaurar la sesión del usuario al recargar la página.
[x] F1-03 [CORE]: Implementar el componente RutaProtegida para blindar las vistas privadas.
[x] F1-04 [PÁGINA]: Conectar y finalizar la LoginPage (lógica de estado, errores, carga).
[x] F1-05 [PÁGINA]: Construir la FinalizarRegistroPage para usuarios invitados por token.
[x] F1-06 [PÁGINA]: Construir el flujo de recuperación de cuenta (ForgotPasswordPage y ResetPasswordPage).
[x] F1-07 [PÁGINA]: Construir la AuthCallbackPage para el login con Google.
[x] F1-08 [PÁGINA]: Construir y conectar la LandingPage con su SolicitudForm.

Epopeya F2: El Centro de Comando (Panel del Dueño)
Objetivo: Empoderarte, Julio, con las herramientas para dirigir tu negocio con total control y visibilidad.
[ ] F2-01 [PÁGINA]: Construir el DashboardPrincipal del Dueño (Notificaciones, Resumen de Edificios, Contratos a Vencer).
[ ] F2-02 [PÁGINA]: Construir el DashboardFinanciero del Dueño con gráficos interactivos.
[ ] F2-03 [PÁGINA]: Módulo de Gestión de Solicitudes (Tabla para listar, Modal para aprobar/rechazar).
[ ] F2-04 [PÁGINA]: Módulo de Gestión de Contratos (Tabla, filtros, vista de detalle).
[ ] F2-04a [COMPONENTE]: Formulario de "Registro de Edificio" para clientes VIP.
[ ] F2-05 [PÁGINA]: Módulo CMS para la Landing Page con drag and drop para reordenar secciones.
[ ] F2-06 [PÁGINA]: Herramienta de Soporte de Base de Datos (SQL Runner).

Epopeya F3: El Primer Vuelo (Onboarding del Administrador)
Objetivo: Crear una experiencia de configuración inicial tan guiada y gratificante que los nuevos administradores se sientan empoderados desde el primer minuto.
[x] F3-01 [COMPONENTE]: Construir el orquestador SetupWizard que guiará todo el proceso.
[x] F3-02 [PÁGINA]: Paso 1: Interfaz de Creación de Unidades (usando el generador flexible).
[x] F3-03 [PÁGINA]: Paso 2: Módulo de Gestión de Recursos.
[x] F3-03a [UI/UX]: CRUD para Tipos de Recurso.
[x] F3-03b [UI/UX]: Interfaces para la creación de inventario (secuencial y carga masiva por Excel).
[x] F3-04 [PÁGINA]: Paso 3: Módulo de Invitación de Residentes (individual y carga masiva por Excel).

Epopeya F4: La Comunidad Viva (Paneles de Admin y Residente)
Objetivo: Construir las herramientas del día a día que hacen de LifeBit el centro neurálgico de la comunidad.
[ ] F4-01 [PÁGINA]: Construir el DashboardPrincipal del Administrador.
[ ] F4-02 [PÁGINA]: Construir el DashboardPrincipal del Residente.
[ ] F4-03 [PÁGINA]: Módulo de Discusiones (Foro Social v1).
[ ] F4-03a [UI/UX]: Vista de hilos y respuestas anidadas.
[ ] F4-03b [LÓGICA]: Implementación de Reacciones (likes).
[ ] F4-03c [LÓGICA]: Sistema de notificaciones multicanal para respuestas.
[ ] F4-04 [PÁGINA]: Módulo de Elecciones v1.
[ ] F4-04a [UI/UX]: Interfaz para postulación de candidatos.
[ ] F4-04b [UI/UX]: Interfaz de votación.
[ ] F4-04c [UI/UX]: Vista de resultados.
[ ] F4-05 [PÁGINA]: Módulo de Gestión Visual de Recursos (Vista de "Puestos").
[ ] F4-06 [PÁGINA]: Sistema de Reportes/Ticketing (vistas para Residente, Admin y Dueño).
[ ] F4-07 [PÁGINA]: Flujo de Pagos y Conciliación (vistas para Residente, Admin y Dueño).

Epopeya F5: El Corazón de LifeBit (Motor de Reglas Visual)
Objetivo: Implementar nuestra killer feature. La herramienta que nos define y nos diferencia de forma radical.
[ ] F5-01 [LÓGICA]: (Fase 1 - MVP Funcional) Implementar las reglas más comunes a través de formularios simples para entregar valor rápidamente.
[ ] F5-02 [UI/UX]: (Fase 2 - La Revolución Visual) Construir la interfaz drag and drop.
[ ] F5-02a [COMPONENTE]: Paleta de bloques de Condiciones y Acciones.
[ ] F5-02b [COMPONENTE]: Lienzo para la construcción de reglas.
[ ] F5-02c [LÓGICA]: Motor de Simulación para previsualizar el impacto de una regla.
[ ] F5-02d [UI/UX]: Asistente guiado (tour interactivo) para la creación de la primera regla.


Misión FE-AUTH-13.1: Construir el Componente de Perfil
[ ] UI-01: En la página de perfil del usuario, añadir una sección para "Cambiar Dirección de Email".
Misión FE-AUTH-13.2: Implementar el Modal de Re-autenticación
[ ] UI-02: Al hacer clic en "Cambiar Email", mostrar un modal que pida al usuario su contraseña actual.
[ ] API-01: Al enviar, llamar al endpoint POST /api/perfil/verify-password.
[ ] STATE-01: Si la respuesta es exitosa, guardar en el estado de la aplicación (ej. Zustand) una bandera que indique que el usuario está "re-autenticado" por un corto periodo de tiempo.
Misión FE-AUTH-13.3: Implementar el Flujo de Cambio
[ ] UI-03: Tras la re-autenticación exitosa, el modal cambia para mostrar un campo donde el usuario puede introducir y confirmar su nueva dirección de email.
[ ] API-02: Al enviar, llamar al endpoint POST /api/perfil/request-email-change.
[ ] UI-04: Mostrar un mensaje de éxito al usuario, instruyéndole que revise su bandeja de entrada en la nueva dirección de correo.
Misión FE-AUTH-13.4: Página de Verificación
[ ] PAGE-01: Crear una nueva página/ruta en el frontend, por ejemplo /verify-email-change.
[ ] API-03: Cuando esta página se carga, debe extraer el token de la URL y hacer una llamada a POST /api/auth/verify-email-change.
[ ] UI-05: Mostrar un mensaje de éxito ("¡Tu email ha sido cambiado! Por favor, inicia sesión de nuevo.") o de error ("El enlace es inválido o ha expirado.") al usuario.


ADR-002: Gestión de Acciones para Usuarios Invitados
Fecha: 2025-10-08
Estado: Propuesto
Contexto:
Actualmente, los usuarios con estado 'invitado' tienen una representación limitada en la interfaz de administrador. Las acciones de gestión, como "Suspender", no son aplicables a ellos. La única forma de actuar sobre una invitación (por ejemplo, si se envió a un correo incorrecto o el usuario no la recibió) es eliminar al usuario y crear una nueva invitación, lo cual es ineficiente y no intuitivo.
Decisión:
Se implementará un conjunto de acciones específicas para usuarios en estado 'invitado' para mejorar la gestión del administrador. Estas acciones serán:
Reenviar Invitación: Volver a enviar el correo electrónico de invitación al mismo correo. Esto es útil si el correo se perdió o fue a spam.
Cancelar Invitación: Eliminar permanentemente al usuario 'invitado' y su token de registro. Esto libera la unidad asociada y permite que sea asignada a otra persona.
Consecuencias:
Frontend:
En ListaResidentes.jsx, para las filas donde residente.estado === 'invitado', se renderizará un nuevo conjunto de iconos de acción:
Un icono para "Reenviar Invitación" (ej. <FiSend />).
Un icono para "Cancelar Invitación" (ej. <FiXCircle />).
Se añadirán nuevas funciones (handleReenviarInvitacion, handleCancelarInvitacion) al hook useGestionResidentes para orquestar estas acciones.
Estas funciones requerirán la creación de modales de confirmación para evitar acciones accidentales, especialmente para "Cancelar Invitación".
Backend:
Se debe crear un nuevo endpoint: POST /api/admin/invitaciones/:id/reenviar. Este endpoint buscará al usuario invitado, generará un nuevo token de registro (invalidando el anterior por seguridad), y encolará un nuevo trabajo en cola_de_trabajos para enviar el email.
Se debe modificar un endpoint existente: El endpoint DELETE /api/admin/residentes/:id debe ser modificado para manejar correctamente la eliminación de un usuario 'invitado'. Actualmente está pensado para un borrado blando (cambiar estado a 'suspendido'). Deberá detectar si el usuario está 'invitado' y, en ese caso, realizar un borrado físico (hard delete) de la base de datos, ya que no hay historial que preservar.